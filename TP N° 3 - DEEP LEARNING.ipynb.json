	
cells	
0	
cell_type	"markdown"
metadata	{}
source	
0	"# Deep Learning\n"
1	"## Practical Deep Learning Tutorial with PyTorch - Tutorial N° 3"
1	
cell_type	"markdown"
metadata	{}
source	
0	"### 2020-2021"
2	
cell_type	"markdown"
metadata	{}
source	
0	"# Importing necessary libraries\n"
3	
cell_type	"code"
execution_count	1
metadata	{}
outputs	[]
source	
0	"import torch\n"
1	"import torch.nn as nn\n"
2	"from torch.autograd import grad\n"
3	"import torch.nn.functional as F\n"
4	"import matplotlib.pyplot as plt\n"
5	"import numpy as np\n"
6	"from sklearn.datasets import make_blobs\n"
7	"import pandas as pd"
4	
cell_type	"code"
execution_count	2
metadata	{}
outputs	[]
source	
0	"import random\n"
1	"from sklearn.utils import shuffle\n"
2	"from sklearn.linear_model import LinearRegression\n"
3	"import torch.nn.functional as F\n"
5	
cell_type	"code"
execution_count	3
metadata	{}
outputs	[]
source	
0	"from sklearn.model_selection import train_test_split"
6	
cell_type	"markdown"
metadata	{}
source	
0	"# Adaline"
7	
cell_type	"markdown"
metadata	{}
source	
0	"1. Built ADALINE model using the nn.Module class "
8	
cell_type	"code"
execution_count	4
metadata	{}
outputs	[]
source	
0	"class ADALINE(torch.nn.Module):\n"
1	"    def __init__(self, input_size) :             #On ne met pas output_size en argument, car c'est toujours 1. \n"
2	"        super(ADALINE,self).__init__()\n"
3	"        self.weights = torch.nn.Linear(input_size, 1)  \n"
4	"        self.weights.weight.detach().zero_() \n"
5	"        self.weights.bias.detach().zero_() \n"
6	"        self.input_size = input_size\n"
7	"    def forward(self, x) :\n"
8	"        azers=self.weights(x)\n"
9	"        return azers.view(-1)"
9	
cell_type	"markdown"
metadata	{}
source	
0	"2. Using 'iris.txt', create a binary datasets in 2-D : The last 100 instances of iris described only by the 2nd and 3rd features\n"
1	"    \n"
2	"    Split the dataset into traing and test sets (70%,30%) \n"
3	"\n"
4	"    Normalize the dataset"
10	
cell_type	"code"
execution_count	5
metadata	{}
outputs	[]
source	
0	"# On importe le dataframe \n"
1	"df = pd.read_csv('iris.txt', header = None)\n"
2	"\n"
3	"#On sélectionne les 100 dernieres données :\n"
4	"df = df[50:150]\n"
5	"\n"
6	"# On enlève les 1ère et 4ème variables : \n"
7	"df.columns = ['sepal0', 'sepal1','petal0', 'petal1', 'classe']\n"
8	"df = df.drop(['sepal0', 'petal1'], axis =1)\n"
9	"df['classe'] = df['classe'].apply(lambda x :1 if x =='Iris-versicolor' else 0)\n"
10	"\n"
11	"# Note pour moi : \n"
12	"# On peut aussi faire : #iris = iris['sepal1','petal0', 'classe']\n"
13	"# Attention, la fonction drop peut nécessiter le paramètre \"inplace = True\" dans certains cas.\n"
14	"# A noter aussi que axis = 1 est pour les colonnes, axis = 0 pour les lignes.  \n"
15	"# Et on aurait aussi pu faire : \n"
16	"# del iris['sepal0']\n"
17	"# del iris['petal1']\n"
18	"\n"
19	"\n"
20	"# get the locations\n"
21	"X = df.iloc[:, 0:2]\n"
22	"y = df.iloc[:, -1]\n"
23	"\n"
24	"# Division du dataset en training et en test sets:\n"
25	"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=150)\n"
26	"std_Xtrain = (X_train - X_train.mean(0)) / X_train.std(0)\n"
27	"\n"
28	"mxte= X_test.mean(0)\n"
29	"stdete=X_test.std(0)\n"
30	"std_Xtest = (X_test - mxte ) / stdete\n"
31	"\n"
11	
cell_type	"raw"
metadata	{}
source	
0	"NOTES POUR MOI-MÊME :\n"
1	"\n"
2	"On peut aussi 'sélectionner' certaines variables ou données avec : \n"
3	"iris.query(\"(classe == 'Iris-virginica' or classe == 'Iris-versicolor')\")\n"
4	"Ici, c'est la même chose que : \n"
5	"iris.query(\"(classe == 'Iris-virginica' or classe == 'Iris-versicolor') and (petal0>0)\") \n"
6	"Je note ça juste pour bien me souvenir de la façon dont on utilise .query, ne pas prendre en compte. "
12	
cell_type	"markdown"
metadata	{}
source	
0	"3. Train the model : we will use MSELoss (mean squared error (squared L2 norm)) as loss function. The optimizer is SGD (Stochastic Gradient Descent) with learning rate 0.01."
13	
cell_type	"code"
execution_count	6
metadata	{}
outputs	[]
source	
0	"model=ADALINE(std_Xtrain.shape[1])\n"
1	"def train(data, data_cible, num_epochs, lr, model):\n"
2	"    m = data.shape[1]\n"
3	"    #MSE = MSE_Loss(data, data_cible, w)\n"
4	"    optimizer = torch.optim.SGD(model.parameters(), lr = 0.01)\n"
5	"    #data = torch.Tensor(data.values)\n"
6	"    #data_cible = torch.Tensor(data_cible.values)\n"
7	"    i=0\n"
8	"    print(model.weights)\n"
9	"    while i<num_epochs : \n"
10	"        i+=1\n"
11	"        ypred = model.forward(data)\n"
12	"        loss = F.mse_loss(ypred, data_cible)\n"
13	"        optimizer.zero_grad()\n"
14	"        loss.backward()                  # -> Calcule les gradients\n"
15	"        optimizer.step()                 # Mise à jour des poids \n"
16	"    print(ypred)\n"
17	"    return ypred"
14	
cell_type	"code"
execution_count	7
metadata	{}
outputs	
0	
name	"stdout"
output_type	"stream"
text	
0	"Linear(in_features=2, out_features=1, bias=True)\n"
1	"tensor([ 0.7868,  0.6917,  0.7413,  1.2988,  0.6563,  0.1737,  0.1737,  0.6462,\n"
2	"         0.5258,  0.0907,  0.3892,  0.6563,  0.3953,  0.1403, -0.0277,  0.9113,\n"
3	"         0.6856,  0.6604,  0.7807,  0.4286,  0.3517,  0.4721,  0.5217,  0.4843,\n"
4	"         0.8657,  0.6401,  0.7413,  0.6128,  0.2728,  0.6087,  0.1858,  0.5733,\n"
5	"         0.6522,  1.0711,  0.1696,  0.4823,  0.7848,  0.4762,  0.7018, -0.3960,\n"
6	"         0.5217,  0.8576, -0.2574, -0.2846,  0.0907,  0.9072,  0.3912,  0.1403,\n"
7	"         0.7868,  0.3517,  0.2212,  0.8303,  1.1642,  1.1662,  0.3912,  0.3123,\n"
8	"        -0.1541,  0.8242,  0.5673,  0.8263,  0.6543,  0.4286,  1.0833,  0.4388,\n"
9	"         0.3892,  0.5652,  1.0458,  0.0098,  0.6998,  0.0806],\n"
10	"       grad_fn=<ViewBackward>)\n"
1	
data	
text/plain	
0	"tensor([ 0.7868,  0.6917,  0.7413,  1.2988,  0.6563,  0.1737,  0.1737,  0.6462,\n"
1	"         0.5258,  0.0907,  0.3892,  0.6563,  0.3953,  0.1403, -0.0277,  0.9113,\n"
2	"         0.6856,  0.6604,  0.7807,  0.4286,  0.3517,  0.4721,  0.5217,  0.4843,\n"
3	"         0.8657,  0.6401,  0.7413,  0.6128,  0.2728,  0.6087,  0.1858,  0.5733,\n"
4	"         0.6522,  1.0711,  0.1696,  0.4823,  0.7848,  0.4762,  0.7018, -0.3960,\n"
5	"         0.5217,  0.8576, -0.2574, -0.2846,  0.0907,  0.9072,  0.3912,  0.1403,\n"
6	"         0.7868,  0.3517,  0.2212,  0.8303,  1.1642,  1.1662,  0.3912,  0.3123,\n"
7	"        -0.1541,  0.8242,  0.5673,  0.8263,  0.6543,  0.4286,  1.0833,  0.4388,\n"
8	"         0.3892,  0.5652,  1.0458,  0.0098,  0.6998,  0.0806],\n"
9	"       grad_fn=<ViewBackward>)"
execution_count	7
metadata	{}
output_type	"execute_result"
source	
0	"a1 = train(torch.Tensor(std_Xtrain.values), torch.Tensor(y_train.values), 150, 0.01, model)\n"
1	"a1"
15	
cell_type	"markdown"
metadata	{}
source	
0	"4. Compute the model accuracy "
16	
cell_type	"code"
execution_count	8
metadata	{}
outputs	
0	
name	"stdout"
output_type	"stream"
text	
0	"Accuracy sur le train set: 0.9142857142857143\n"
1	"Accuracy sur le test set 0.8666666666666667\n"
source	
0	"for i in range(a1.shape[0]) : \n"
1	"    if a1[i] < 0.5:\n"
2	"        a1[i] = 0\n"
3	"\n"
4	"    else :\n"
5	"        a1[i] = 1\n"
6	"\n"
7	"print('Accuracy sur le train set:', sum((a1[i] == y_train.iloc[i]).item() for i in range(len(y_train))) / len(y_train))\n"
8	"\n"
9	"\n"
10	"\n"
11	"\n"
12	"y_pred = model.forward(torch.Tensor(std_Xtest.values))\n"
13	"\n"
14	"for i in range(y_pred.shape[0]) : \n"
15	"    if y_pred[i] < 0.5:\n"
16	"        y_pred[i] = 0\n"
17	"\n"
18	"    else :\n"
19	"        y_pred[i] = 1\n"
20	"        \n"
21	"y_pred = y_pred.detach().numpy()\n"
22	"print('Accuracy sur le test set', sum(y_pred == y_test)/len(y_test))"
17	
cell_type	"code"
execution_count	9
metadata	{}
outputs	
0	
data	
text/plain	
0	"Parameter containing:\n"
1	"tensor([[ 0.0075, -0.3574]], requires_grad=True)"
execution_count	9
metadata	{}
output_type	"execute_result"
source	
0	"w, b = model.weights.weight, model.weights.bias\n"
1	"\n"
2	"w"
18	
cell_type	"code"
execution_count	10
metadata	{}
outputs	
0	
data	
image/png	"\n"
text/plain	
0	"<Figure size 1152x432 with 2 Axes>"
metadata	
needs_background	"light"
output_type	"display_data"
source	
0	"w= model.weights.weight #Pas besoin de biais car les données ont été normalisées ! \n"
1	"\n"
2	"x0_min = -3\n"
3	"x1_min = ( (-(w[0][0].item() * x0_min) ) / w[0][1].item() )\n"
4	"\n"
5	"x0_max = 3\n"
6	"x1_max = ( (-(w[0][0].item() * x0_max) ) / w[0][1].item() )\n"
7	"\n"
8	"\n"
9	"fig, ax = plt.subplots(1, 2, sharex=True, figsize=(16, 6))\n"
10	"\n"
11	"\n"
12	"ax[0].plot([x0_min, x0_max], [x1_min, x1_max])\n"
13	"ax[1].plot([x0_min, x0_max], [x1_min, x1_max])\n"
14	"\n"
15	"\n"
16	"ax[0].scatter(std_Xtrain[y_train<0.5]['sepal1'], std_Xtrain[y_train<0.5]['petal0'], label='class 0', marker='o')\n"
17	"ax[0].scatter(std_Xtrain[y_train>0.5]['sepal1'], std_Xtrain[y_train>0.5]['petal0'], label='class 1', marker='s')\n"
18	"\n"
19	"ax[1].scatter(std_Xtest[y_test<0.5]['sepal1'], std_Xtest[y_test<0.5]['petal0'], label='class 0', marker='o')\n"
20	"ax[1].scatter(std_Xtest[y_test>0.5]['sepal1'], std_Xtest[y_test>0.5]['petal0'], label='class 1', marker='s')\n"
21	"\n"
22	"ax[1].legend(loc='upper left')\n"
23	"plt.show()"
19	
cell_type	"markdown"
metadata	{}
source	
0	"# Perceptron"
20	
cell_type	"markdown"
metadata	{}
source	
0	"5. Built a Perceptron model using nn.Module class"
21	
cell_type	"code"
execution_count	11
metadata	{}
outputs	[]
source	
0	"class Perceptron(torch.nn.Module):\n"
1	"    def __init__(self):\n"
2	"        super(Perceptron, self).__init__()\n"
3	"        self.fc = nn.Linear(1,1)\n"
4	"        self.relu = torch.nn.ReLU()\n"
5	"        self.input_size = input_size\n"
6	"    def forward(self, x):\n"
7	"        output = self.fc(x)\n"
8	"        output = self.relu(x) \n"
9	"        return output\n"
10	"    \n"
11	"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n"
12	"   \n"
13	"    \n"
14	"    \n"
15	"class Perceptro():\n"
16	"    def __init__(self, num_features):\n"
17	"        self.num_features = num_features\n"
18	"        self.weights = torch.zeros(num_features, 1, \n"
19	"                                   dtype=torch.float32, device=device)\n"
20	"        self.bias = torch.zeros(1, dtype=torch.float32, device=device)\n"
21	"        \n"
22	"        # placeholder vectors so they don't\n"
23	"        # need to be recreated each time\n"
24	"        self.ones = torch.ones(1)\n"
25	"        self.zeros = torch.zeros(1)\n"
26	"\n"
27	"    def forward(self, x):\n"
28	"        linear = torch.mm(x, self.weights) + self.bias\n"
29	"        predictions = torch.where(linear > 0., self.ones, self.zeros)\n"
30	"        return predictions\n"
31	"        \n"
32	"    def backward(self, x, y):  \n"
33	"        predictions = self.forward(x)\n"
34	"        errors = y - predictions\n"
35	"        return errors\n"
36	"        \n"
37	"    def train(self, x, y, epochs):\n"
38	"        for e in range(epochs):\n"
39	"\n"
40	"            for i in range(y.shape[0]):\n"
41	"                # use view because backward expects a matrix (i.e., 2D tensor)\n"
42	"                errors = self.backward(x[i].reshape(1, self.num_features), y[i]).reshape(-1)\n"
43	"                self.weights += (errors * x[i]).reshape(self.num_features, 1)\n"
44	"                self.bias += errors\n"
45	"                \n"
46	"\n"
47	"        \n"
48	"    def evaluate(self, x, y):\n"
49	"        predictions = self.forward(x).reshape(-1)\n"
50	"        accuracy = torch.sum(predictions == y).float() / y.shape[0]\n"
51	"        return accuracy"
22	
cell_type	"markdown"
metadata	{}
source	
0	"6. Load the 'perceptron_toydata' dataset\n"
1	"\n"
2	"    Split the dataset into train and test sets\n"
3	"    \n"
4	"    Normalize the data"
23	
cell_type	"code"
execution_count	12
metadata	{}
outputs	
0	
data	
text/html	
0	"<div>\n"
1	"<style scoped>\n"
2	"    .dataframe tbody tr th:only-of-type {\n"
3	"        vertical-align: middle;\n"
4	"    }\n"
5	"\n"
6	"    .dataframe tbody tr th {\n"
7	"        vertical-align: top;\n"
8	"    }\n"
9	"\n"
10	"    .dataframe thead th {\n"
11	"        text-align: right;\n"
12	"    }\n"
13	"</style>\n"
14	"<table border=\"1\" class=\"dataframe\">\n"
15	"  <thead>\n"
16	"    <tr style=\"text-align: right;\">\n"
17	"      <th></th>\n"
18	"      <th>0</th>\n"
19	"      <th>1</th>\n"
20	"      <th>2</th>\n"
21	"    </tr>\n"
22	"  </thead>\n"
23	"  <tbody>\n"
24	"    <tr>\n"
25	"      <th>0</th>\n"
26	"      <td>0.77</td>\n"
27	"      <td>-1.14</td>\n"
28	"      <td>0</td>\n"
29	"    </tr>\n"
30	"    <tr>\n"
31	"      <th>1</th>\n"
32	"      <td>-0.33</td>\n"
33	"      <td>1.44</td>\n"
34	"      <td>0</td>\n"
35	"    </tr>\n"
36	"    <tr>\n"
37	"      <th>2</th>\n"
38	"      <td>0.91</td>\n"
39	"      <td>-3.07</td>\n"
40	"      <td>0</td>\n"
41	"    </tr>\n"
42	"    <tr>\n"
43	"      <th>3</th>\n"
44	"      <td>-0.37</td>\n"
45	"      <td>-1.91</td>\n"
46	"      <td>0</td>\n"
47	"    </tr>\n"
48	"    <tr>\n"
49	"      <th>4</th>\n"
50	"      <td>-1.84</td>\n"
51	"      <td>-1.13</td>\n"
52	"      <td>0</td>\n"
53	"    </tr>\n"
54	"    <tr>\n"
55	"      <th>...</th>\n"
56	"      <td>...</td>\n"
57	"      <td>...</td>\n"
58	"      <td>...</td>\n"
59	"    </tr>\n"
60	"    <tr>\n"
61	"      <th>95</th>\n"
62	"      <td>0.71</td>\n"
63	"      <td>2.27</td>\n"
64	"      <td>1</td>\n"
65	"    </tr>\n"
66	"    <tr>\n"
67	"      <th>96</th>\n"
68	"      <td>1.96</td>\n"
69	"      <td>0.83</td>\n"
70	"      <td>1</td>\n"
71	"    </tr>\n"
72	"    <tr>\n"
73	"      <th>97</th>\n"
74	"      <td>2.52</td>\n"
75	"      <td>1.83</td>\n"
76	"      <td>1</td>\n"
77	"    </tr>\n"
78	"    <tr>\n"
79	"      <th>98</th>\n"
80	"      <td>2.77</td>\n"
81	"      <td>2.82</td>\n"
82	"      <td>1</td>\n"
83	"    </tr>\n"
84	"    <tr>\n"
85	"      <th>99</th>\n"
86	"      <td>4.16</td>\n"
87	"      <td>3.34</td>\n"
88	"      <td>1</td>\n"
89	"    </tr>\n"
90	"  </tbody>\n"
91	"</table>\n"
92	"<p>100 rows × 3 columns</p>\n"
93	"</div>"
text/plain	
0	"       0     1  2\n"
1	"0   0.77 -1.14  0\n"
2	"1  -0.33  1.44  0\n"
3	"2   0.91 -3.07  0\n"
4	"3  -0.37 -1.91  0\n"
5	"4  -1.84 -1.13  0\n"
6	"..   ...   ... ..\n"
7	"95  0.71  2.27  1\n"
8	"96  1.96  0.83  1\n"
9	"97  2.52  1.83  1\n"
10	"98  2.77  2.82  1\n"
11	"99  4.16  3.34  1\n"
12	"\n"
13	"[100 rows x 3 columns]"
execution_count	12
metadata	{}
output_type	"execute_result"
source	
0	"toy = pd.read_csv('perceptron_toydata.txt', sep='\\t', header = None)\n"
1	"toy"
24	
cell_type	"code"
execution_count	13
metadata	{}
outputs	[]
source	
0	"# get the locations\n"
1	"X = toy.iloc[:, 0:2]\n"
2	"y = toy.iloc[:, -1]\n"
3	"  \n"
4	"# split the dataset\n"
5	"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=150)\n"
6	"\n"
7	"X_train = (X_train - np.average(X_train)) / (np.std(X_train))\n"
8	"X_test = (X_test - np.mean(X_test)) / (np.std(X_test))\n"
25	
cell_type	"markdown"
metadata	{}
source	
0	"7. Train the perceptron"
26	
cell_type	"code"
execution_count	14
metadata	{}
outputs	
0	
name	"stdout"
output_type	"stream"
text	
0	"  Weights: tensor([[2.1747],\n"
1	"        [1.4412]]) \n"
2	"  Biais:  tensor([-1.])\n"
source	
0	"train2 = Perceptro(num_features=2)\n"
1	"\n"
2	"X_train = torch.tensor(X_train.values, dtype=torch.float32, device=device)\n"
3	"y_train = torch.tensor(y_train, dtype=torch.float32, device=device)\n"
4	"\n"
5	"train2.train(X_train, y_train , epochs=5)\n"
6	"\n"
7	"print('  Weights:',  train2.weights, '\\n  Biais: ', train2.bias)"
27	
cell_type	"markdown"
metadata	{}
source	
0	"8. evaluate the model (accuracy)"
28	
cell_type	"code"
execution_count	15
metadata	{}
outputs	
0	
name	"stdout"
output_type	"stream"
text	
0	"Test set accuracy: 96.67%\n"
source	
0	"X_test = torch.tensor(X_test.values, dtype=torch.float32, device=device)\n"
1	"y_test = torch.tensor(y_test.values, dtype=torch.float32, device=device)\n"
2	"\n"
3	"test_acc = train2.evaluate(X_test, y_test)\n"
4	"print('Test set accuracy: %.2f%%' % (test_acc*100))"
29	
cell_type	"code"
execution_count	16
metadata	{}
outputs	
0	
name	"stderr"
output_type	"stream"
text	
0	"/opt/anaconda3/lib/python3.8/site-packages/numpy/core/_asarray.py:171: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.\n"
1	"  return array(a, dtype, copy=False, order=order, subok=True)\n"
2	"/opt/anaconda3/lib/python3.8/site-packages/numpy/core/_asarray.py:171: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n"
3	"  return array(a, dtype, copy=False, order=order, subok=True)\n"
1	
data	
image/png	"\n"
text/plain	
0	"<Figure size 1152x432 with 2 Axes>"
metadata	
needs_background	"light"
output_type	"display_data"
source	
0	"w, b = train2.weights, train2.bias \n"
1	"\n"
2	"x0_min = -2\n"
3	"x1_min = ( (-(w[0] * x0_min) - b[0])  / w[1] )\n"
4	"\n"
5	"x0_max = 2\n"
6	"x1_max = ( (-(w[0] * x0_max) - b[0]) / w[1] )\n"
7	"\n"
8	"\n"
9	"fig, ax = plt.subplots(1, 2, sharex=True, figsize=(16, 6))\n"
10	"\n"
11	"\n"
12	"ax[0].plot([x0_min, x0_max], [x1_min, x1_max])\n"
13	"ax[1].plot([x0_min, x0_max], [x1_min, x1_max])\n"
14	"\n"
15	"\n"
16	"ax[0].scatter(X_train[y_train<0.5][:,0], X_train[y_train<0.5][:,1], label='class 0', marker='o')\n"
17	"ax[0].scatter(X_train[y_train>0.5][:,0], X_train[y_train>0.5][:,1], label='class 1', marker='s')\n"
18	"ax[0].set_title(\"Train set\")\n"
19	"\n"
20	"ax[1].scatter(X_test[y_test<0.5][:,0], X_test[y_test<0.5][:,1], label='class 0', marker='o')\n"
21	"ax[1].scatter(X_test[y_test>0.5][:,0], X_test[y_test>0.5][:,1], label='class 1', marker='s')\n"
22	"ax[1].set_title(\"Test set\")\n"
23	"\n"
24	"ax[1].legend(loc='upper left')\n"
25	"plt.show()"
30	
cell_type	"markdown"
metadata	{}
source	
0	"# Multi Layer Perceptron"
31	
cell_type	"markdown"
metadata	{}
source	
0	"Unlike the single-layer perceptron, the Multi Layer Perceptron models have hidden layers\n"
1	"between the input and the output layers. After every hidden layer, an activation function \n"
2	"is applied to introduce non-linearity. \n"
3	"\n"
4	"9. Built a simple Multi Layer Perceptron model withe one hidden layer. \n"
5	"After the hidden layer, we will use ReLU as activation before the information is sent to the output layer.\n"
6	"As an output activation function, we will use Sigmoid. "
32	
cell_type	"code"
execution_count	null
metadata	{}
outputs	[]
source	
0	"class Net(nn.Module):\n"
1	"    def __init__(self, num_features):\n"
2	"        super(Net,self).__init__()\n"
3	"        self.num_features = num_features\n"
4	"        self.weights = torch.zeros(num_features, 1, \n"
5	"                                   dtype=torch.float32, device=device)\n"
6	"        self.bias = torch.zeros(num_features, dtype=torch.float32, device=device)\n"
7	"        # number of hidden nodes in each layer (512)\n"
8	"        hidden_1 = 512\n"
9	"        hidden_2 = 512\n"
10	"        # linear layer (784 -> hidden_1)\n"
11	"        self.fc1 = nn.Linear(2,2)\n"
12	"        # linear layer (n_hidden -> hidden_2)\n"
13	"        self.fc2 = nn.Linear(2,2)\n"
14	"        # dropout layer (p=0.2)\n"
15	"        # dropout prevents overfitting of data\n"
16	"        self.droput = nn.Dropout(0.2)\n"
17	"        \n"
18	"    def forward(self,x):\n"
19	"        # flatten image input\n"
20	"        x = x.view(-1,2)\n"
21	"        # add hidden layer, with relu activation function\n"
22	"        x = F.relu(self.fc1(x))\n"
23	"        # add dropout layer\n"
24	"        x = self.droput(x)\n"
25	"        # add hidden layer, with sigmoid activation function\n"
26	"        x = torch.sigmoid(self.fc1(x))\n"
27	"        # add output layer\n"
28	"        x = self.fc2(x)\n"
29	"        return x\n"
30	"    \n"
31	"        \n"
32	"    def backward(self, x, y):  \n"
33	"        predictions = self.forward(x)\n"
34	"        errors = y - predictions\n"
35	"        return errors\n"
36	"    \n"
37	"    def train(self, x, y, epochs):\n"
38	"        for e in range(epochs):\n"
39	"            optimizer = torch.optim.SGD(model.parameters(), lr = 0.01)\n"
40	"            for i in range(y.shape[0]):\n"
41	"                # use view because backward expects a matrix (i.e., 2D tensor)\n"
42	"                errors = self.backward(x[i].reshape(1, self.num_features), y[i]).reshape(-1)\n"
43	"                self.weights += (errors * x[i]).reshape(self.num_features, 1)\n"
44	"                self.bias += errors\n"
45	"                ypred = self.forward(x)\n"
46	"                loss = torch.nn.BCELoss(self.weights)\n"
47	"                                        #, ypred, y, reduce=False)\n"
48	"                optimizer.zero_grad()\n"
49	"                #loss.backward()                  \n"
50	"                optimizer.step()\n"
51	"                \n"
52	"    \n"
53	"    def evaluate(self, x, y):\n"
54	"        predictions = self.forward(x).reshape(-1)\n"
55	"        accuracy = torch.sum(predictions == y).float() / y.shape[0]\n"
56	"        print(accuracy)\n"
57	"        return accuracy\n"
58	"#.reshape(1, self.num_features)"
33	
cell_type	"markdown"
metadata	{}
source	
0	"10. Create a random datasets and assign binary labels {0,1}"
34	
cell_type	"code"
execution_count	null
metadata	{}
outputs	[]
source	
0	"data = np.random.randint(1,100,size=(1000,2))\n"
1	"df = pd.DataFrame(data, columns=['random_numbers_1', 'random_numbers_2'])\n"
2	"classes = np.random.randint(0,2,size=(1000,1))\n"
3	"classes = pd.DataFrame(classes, columns=['label'])\n"
4	"df['labels'] = classes"
35	
cell_type	"markdown"
metadata	{}
source	
0	"11. Define the model with input dimension 2 and hidden dimension 10. \n"
1	"Since the task is to classify binary labels, we can use BCELoss (Binary Cross Entropy Loss) as loss function.\n"
2	"The optimizer is SGD (Stochastic Gradient Descent) with learning rate 0.01."
36	
cell_type	"code"
execution_count	null
metadata	{}
outputs	[]
source	
0	"model = Net(2)\n"
1	"haka = df[['random_numbers_1', 'random_numbers_2']]\n"
2	"df1 = torch.tensor(haka.values, dtype=torch.float32, device=device)\n"
3	"df2 = torch.tensor(df[['labels']].values, dtype = torch.float32, device = device)\n"
4	"df1.shape\n"
5	"#F.sigmoid(model.fc1(df1))\n"
6	"model = model.train(df1,df2,epochs = 1000)"
37	
cell_type	"markdown"
metadata	{}
source	
0	"12. Check the test loss before the model training and compare it with the test loss after the training."
38	
cell_type	"code"
execution_count	null
metadata	{}
outputs	[]
source	
0	"model2 = Net(2)\n"
1	"model2.evaluate(df1,df2)"
39	
cell_type	"markdown"
metadata	{}
source	
0	"On compare après un entraînement : "
40	
cell_type	"code"
execution_count	null
metadata	{}
outputs	[]
source	
0	"model.evaluate(df1,df2)"
41	
cell_type	"markdown"
metadata	{}
source	
0	"Ici, ça devrait marcher, mais ça ne fonctionne pas, je ne sais pas pourquoi... Il faut vraiment que je fasse le TP n°4 donc je ne peux pas y passer plus de temps, désolée..."
42	
cell_type	"markdown"
metadata	{}
source	
0	"13. In order to improve the model, you can try out different parameter values for your\n"
1	"hyperparameters (ie. hidden dimension size, epoch size, learning rates). You can also \n"
2	"try changing the structure of your model (ie. adding more hidden layers) to see if your\n"
3	"mode improves. "
43	
cell_type	"code"
execution_count	null
metadata	{}
outputs	[]
source	[]
44	
cell_type	"markdown"
metadata	{}
source	
0	"# Fin du TP"
45	
cell_type	"code"
execution_count	null
metadata	{}
outputs	[]
source	
0	"### J'ai écrit une fonction qui calcule le risque empirique. \n"
1	"### Mais en fait il en existe une toute faite. \n"
2	"### Je laisse l'algorithme même si on ne va pas utiliser la fonction, parce qu'il fonctionne,\n"
3	"### et que ça m'aide à me souvenir du calcul. \n"
4	"\n"
5	"def MSE_Loss(data, cible, adal) :\n"
6	"    MSE = 0\n"
7	"    for i in range(data.shape[0]) :\n"
8	"        flower = torch.Tensor([[std_Xtrain.iloc[i][0], std_Xtrain.iloc[i][1]],])\n"
9	"        y = adal.forward(flower)[0].item() #y est un scalaire, ce qui va nous permettre de le comparer à des scalaires. \n"
10	"        MSE += (cible.iloc[i] - y)**2\n"
11	"    MSE = 0.5*MSE*(1/data.shape[0])\n"
12	"    return MSE"
46	
cell_type	"code"
execution_count	null
metadata	{}
outputs	[]
source	
0	"model = nn.Sequential(\n"
1	"        nn.Linear(2,2),\n"
2	"        nn.ReLU()\n"
3	"        )\n"
4	"\n"
5	"def modele(x) : \n"
6	"    a = x.shape[1]\n"
7	"    b = nn.Sequential(\n"
8	"        nn.Linear(a,1),\n"
9	"        nn.ReLU()\n"
10	"        )\n"
11	"    return b(x)\n"
12	"\n"
13	"X = torch.rand(1,7)\n"
14	"modele(X)"
metadata	
kernelspec	
display_name	"Python 3"
language	"python"
name	"python3"
language_info	
codemirror_mode	
name	"ipython"
version	3
file_extension	".py"
mimetype	"text/x-python"
name	"python"
nbconvert_exporter	"python"
pygments_lexer	"ipython3"
version	"3.8.8"
nbformat	4
nbformat_minor	4
